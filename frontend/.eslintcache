[{"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\index.js":"1","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\App.js":"2","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\context\\ThemeContext.js":"4","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\navigation\\Navbar.js":"5","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\reducers\\auth.js":"6","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\reducers\\plans.js":"7","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Home.js":"8","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\About.js":"9","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\footer\\Footer.js":"10","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\SignUp.js":"11","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\Login.js":"12","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\CompanyProfile.js":"13","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\Logout.js":"14","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Plans\\Plans.js":"15","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\auth.js":"16","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\plans.js":"17","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Plans\\ViewPlans.js":"18","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\dummy-data\\plan.js":"19","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Loading\\Loading.jsx":"20","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Error\\Error.jsx":"21","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\utils\\formValidation.js":"22","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\reviews.js":"23","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Profile.js":"24"},{"size":811,"mtime":1738982928089,"results":"25","hashOfConfig":"26"},{"size":1617,"mtime":1738982928075,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1738982928115,"results":"28","hashOfConfig":"26"},{"size":465,"mtime":1738982928086,"results":"29","hashOfConfig":"26"},{"size":8061,"mtime":1739067603790,"results":"30","hashOfConfig":"26"},{"size":750,"mtime":1738982928113,"results":"31","hashOfConfig":"26"},{"size":2031,"mtime":1739173156269,"results":"32","hashOfConfig":"26"},{"size":15051,"mtime":1740266728009,"results":"33","hashOfConfig":"26"},{"size":1117,"mtime":1738982928076,"results":"34","hashOfConfig":"26"},{"size":2822,"mtime":1738982928084,"results":"35","hashOfConfig":"26"},{"size":13040,"mtime":1739041915304,"results":"36","hashOfConfig":"26"},{"size":6173,"mtime":1739060274171,"results":"37","hashOfConfig":"26"},{"size":537,"mtime":1738982928080,"results":"38","hashOfConfig":"26"},{"size":2271,"mtime":1738982928082,"results":"39","hashOfConfig":"26"},{"size":11664,"mtime":1739147848896,"results":"40","hashOfConfig":"26"},{"size":2506,"mtime":1739135291295,"results":"41","hashOfConfig":"26"},{"size":3696,"mtime":1739172830285,"results":"42","hashOfConfig":"26"},{"size":3904,"mtime":1739147256547,"results":"43","hashOfConfig":"26"},{"size":1523,"mtime":1738982928088,"results":"44","hashOfConfig":"26"},{"size":788,"mtime":1738982928078,"results":"45","hashOfConfig":"26"},{"size":849,"mtime":1738982928077,"results":"46","hashOfConfig":"26"},{"size":1499,"mtime":1738982928085,"results":"47","hashOfConfig":"26"},{"size":626,"mtime":1739053599553,"results":"48","hashOfConfig":"26"},{"size":9238,"mtime":1740262373411,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"i1iivw",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\index.js",[],["110","111"],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\App.js",["112","113"],"import React from \"react\";\r\nimport {ThemeProvider, createTheme , colors, CssBaseline} from \"@mui/material\";\r\nimport Navbar from \"./components/navigation/Navbar\";\r\nimport {blue, red} from \"@mui/material/colors\";\r\nimport {ThemeContext} from \"./context/ThemeContext\";\r\nimport './App.css';\r\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport AuthReducer from \"./redux/reducers/auth\";\r\nimport PlansReducer from \"./redux/reducers/plans\";\r\n//import ReviewReducer from \"./redux/reducers/reviews\"\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    auth : AuthReducer,\r\n    plans : PlansReducer\r\n  }),\r\n  applyMiddleware(thunk, logger)\r\n);\r\n\r\n\r\n\r\nfunction App() {\r\n  const {dark} = React.useContext(ThemeContext);\r\n\r\n  const theme = createTheme ({\r\n    typography: {\r\n      fontFamily: `\"Poppins\", sans-serif`,\r\n      fontSize: 14,\r\n      fontWeightLight: 300,\r\n      fontWeightRegular: 400,\r\n      fontWeightMedium: 500\r\n    },\r\n    palette: {\r\n      type: dark ? 'dark' : 'light',\r\n      primary: {\r\n        main: dark?blue[300]:blue[500],\r\n      },\r\n      secondary: {\r\n        main: '#ffc107',\r\n      },\r\n    },\r\n    overrides: {\r\n      MuiTypography: {\r\n        body2: {\r\n          fontSize: [15, \"!important\"]\r\n        }\r\n      }\r\n    }\r\n  })\r\n  //#64b5f6\r\n\r\n  return (\r\n    <>\r\n    <ThemeProvider theme={theme}>\r\n      <Provider store={store}>\r\n      <CssBaseline/>\r\n      <Navbar/>\r\n      </Provider>\r\n    </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\context\\ThemeContext.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\navigation\\Navbar.js",["114","115","116","117"],"import React, {useEffect} from 'react';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { makeStyles,useTheme } from '@mui/styles';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Footer from '../footer/Footer'\r\nimport {AccountCircle} from \"@mui/icons-material\";\r\nimport Login from \"../authentication/Login\";\r\nimport SignUp from \"../authentication/SignUp\";\r\nimport CompanyProfile from \"../authentication/CompanyProfile\";\r\nimport FeedbackIcon from '@mui/icons-material/Feedback';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport Logout from \"../authentication/Logout\";\r\nimport {Switch, Route, useNavigate} from \"react-router\";\r\nimport Home from \"../Home\";\r\nimport About from \"../About\";\r\nimport Plans from \"../Plans/Plans\"\r\nimport {Brightness4, Brightness7} from \"@mui/icons-material\";\r\nimport {ThemeContext} from \"../../context/ThemeContext\";\r\nimport Button from '@mui/material/Button';\r\nimport Profile from '../Profile';\r\n\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme)=>({\r\n    root : {\r\n        display: 'flex'\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    space : {\r\n        marginRight: theme.spacing(3),\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        backgroundColor: theme.palette.primary,\r\n        color: theme.palette.text.primary,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n          display: 'flex',\r\n        }\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    themer: {\r\n        color: theme.palette.text.primary,\r\n        marginRight : 5\r\n    }\r\n}))\r\n\r\nconst Navbar = ()=>{\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [loggedIn, setLoggedIn] = React.useState(true);\r\n    const [signUp, setSignUp] = React.useState(false);\r\n    const [logout, setLogout] = React.useState(false);\r\n    const [title,setTitle] = React.useState(\"\");\r\n    const {dark, toggleTheme} = React.useContext(ThemeContext);\r\n    const [openProfile, setOpenProfile] = React.useState(false);\r\n    const handleProfileClickOpen = () => setOpenProfile(true);\r\n    const handleDrawerToggle = () => setOpen(!open);\r\n    const history = useNavigate();\r\n    const setLogin = ()=>setLoggedIn(loggedIn=>!loggedIn);\r\n    const [token,setToken] = React.useState(localStorage.getItem('token'))\r\n\r\n    useEffect(() => {\r\n        if(token === null) {\r\n            navigate('/login');\r\n            setLoggedIn(false)\r\n            setTitle(\"RaterNet\")\r\n        } else{\r\n            let user = jwt_decode(token);\r\n            navigate('/');\r\n            setLoggedIn(true)\r\n            setTitle(user.asn)\r\n        }\r\n    }, [token])\r\n\r\n    \r\n    return (\r\n        <div>\r\n        <div className={classes.root}>\r\n             <CssBaseline />\r\n             <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar variant='dense'>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={() => setOpen(!open)}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}>\r\n                        <MenuIcon />\r\n                    </IconButton> \r\n                    <Typography variant=\"h6\" noWrap href='/'>{title}</Typography>\r\n                    <div className={classes.space}/>\r\n                    <div className={classes.grow}/>\r\n                    <IconButton edge='end' className={classes.themer} onClick={toggleTheme}>\r\n                        {dark ? <Brightness7/>: <Brightness4/>}\r\n                    </IconButton>\r\n                    {loggedIn ? \r\n                    <div className={classes.sectionDesktop}>\r\n                        <Button variant=\"outlined\" color=\"inherit\" onClick={() => setLogout(true)}>Logout</Button>\r\n                    </div> : \r\n                     <div className={classes.sectionDesktop}>\r\n                        <Button variant=\"outlined\" color=\"inherit\" onClick={() => setSignUp(signUp=>!signUp)}>SignUp</Button>\r\n                    </div>}\r\n                </Toolbar>\r\n             </AppBar>\r\n             <Drawer\r\n                className={classes.drawer}\r\n                anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                open={open}\r\n                onClose={handleDrawerToggle}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}>\r\n                <Toolbar variant='dense' />\r\n                <div className={classes.drawerContainer}>\r\n                    <List>\r\n                        {loggedIn ?  <ListItem button key={'Profile'} onClick={()=>{\r\n                            navigate('/profile')\r\n                        }}>\r\n                            <ListItemIcon> <AccountCircle/></ListItemIcon>\r\n                            <ListItemText primary={'Profile'} />\r\n                        </ListItem>: null}\r\n                        {loggedIn ?  <ListItem button key={'Plans'} onClick={() => navigate('/plans')}>\r\n                            <ListItemIcon><FeedbackIcon/></ListItemIcon>\r\n                            <ListItemText primary={'Plans'}/>\r\n                        </ListItem>: null}\r\n                        <ListItem button key={'About'} onClick={() => navigate('/about')}>\r\n                            <ListItemIcon><InfoIcon/></ListItemIcon>\r\n                            <ListItemText primary={'About'} />\r\n                        </ListItem>\r\n                    </List>\r\n                    <Divider/>\r\n                </div>\r\n            </Drawer>\r\n            <Logout open={logout} setOpen={setLogout} setLoggedIn={setLoggedIn} setDrawerOpen={setOpen} setTitle={setTitle}/>\r\n            <SignUp open={signUp} setOpen={setSignUp} setTitle={setTitle}/>\r\n            <main style={{\r\n                width : '100%',\r\n                justifyContent : 'center',\r\n                padding : 30,\r\n                alignItems : 'center'\r\n            }}>\r\n                <Toolbar variant='dense'/>\r\n                <Switch>\r\n                    <Route exact path='/' element={Home}/>\r\n                    <Route exact path='/about' element={About}/>\r\n                    <Route exact path='/login' element={()=>\r\n                    <Login setloggedIn={setLogin}  \r\n                        setToken={setToken}/>}/>\r\n                    <Route exact path='/profile' element={Profile}/>\r\n                    <Route exact path='/plans' element={Plans}/>\r\n                </Switch>\r\n            </main>\r\n            \r\n        </div>\r\n        <Footer/>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Navbar;\r\n","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\reducers\\auth.js",["118"],"import { \r\n    LOGOUT_USER,\r\n    AUTHENTICATE,\r\n    GET_PROFILE,\r\n  SAVE_ASN} from '../actions/auth';\r\n  \r\n  const initialState = {\r\n    token: null,\r\n    asn : null,\r\n    profile : {}\r\n  };\r\n  \r\n  export default (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case AUTHENTICATE:\r\n        return {\r\n          ...state,\r\n          token: action.token\r\n        };\r\n      case SAVE_ASN:\r\n          return {\r\n            ...state,\r\n            asn : action.asn\r\n          };\r\n      case GET_PROFILE :\r\n          return {\r\n            ...state,\r\n            profile : Object.assign(state.profile,action.payload)\r\n          }\r\n      case  LOGOUT_USER:\r\n        return initialState;\r\n      default:\r\n        return state;\r\n    }\r\n  };","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\reducers\\plans.js",["119"],"import {\r\n    FETCH_PLANS,\r\n    ADD_PLAN,\r\n    UPDATE_PLAN,\r\n    DELETE_PLAN\r\n} from '../actions/plans'\r\n\r\nconst initialState = {\r\n    plans: []\r\n}\r\n\r\nexport default (state = initialState,action)=>{\r\n    switch (action.type){\r\n        case FETCH_PLANS:\r\n            console.log(\"action.payload.data.plan \",action.payload.data.plan)\r\n            return {\r\n                plans : action.payload\r\n            }\r\n        case ADD_PLAN:\r\n            console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                plans: {\r\n                    ...state.plans,\r\n                    data: {\r\n                        plan: [...(state.plans.data?.plan || []), action.payload]  // Ensure it's an array\r\n                    }\r\n                }\r\n            };\r\n        case UPDATE_PLAN : \r\n        console.log(\"Updating Plan:\", action.payload);\r\n        console.log(\"Before Update:\", state.plans.data.plan.find(p => p._id === action.payload._id));\r\n        console.log(\"After Update:\", state.plans.data.plan.map(p => p._id === action.payload._id ? { ...p, ...action.payload } : p));\r\n        return {\r\n            ...state,\r\n            plans: {\r\n                ...state.plans,\r\n                data: {\r\n                    ...state.plans.data,\r\n                    plan:  state.plans.data.plan.map(existingPlan =>\r\n                        existingPlan._id === action.payload._id\r\n                            ? { ...existingPlan, ...action.payload }\r\n                            : existingPlan\r\n                    ) // Ensure it's an array\r\n                }\r\n            }\r\n        };\r\n        case DELETE_PLAN : \r\n            return {\r\n                ...state,\r\n                plans:{\r\n                    ...state.plans,\r\n                    data:{\r\n                        ...state.plans.data,\r\n                        plan : state.plans.data.plan.filter(plan=>plan._id!==action.plan_id)\r\n                    }\r\n                } \r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Home.js",["120","121","122","123","124","125"],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\About.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\footer\\Footer.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\SignUp.js",["126","127","128","129","130"],"import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { useNavigate } from \"react-router\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {SignUpUser} from \"../../redux/actions/auth\"\r\nimport formValidation from '../utils/formValidation';\r\n\r\nconst initialValues = {\r\n    asnNo : \"\",\r\n    company_email : \"\",\r\n    company_password : \"\",\r\n    company_password_confirm : \"\",\r\n    ISP_name : \"\",\r\n    type_of_service : \"\",\r\n    photoUrl : \"\",\r\n    webUrl : \"\"\r\n}\r\n\r\nconst fieldsValidation = {\r\n    asnNo : {\r\n        error: \"\",\r\n        validate: \"string\",\r\n        minLength : 7,\r\n        maxLength : 10\r\n    },\r\n    company_email : {\r\n        error: \"\",\r\n        validate: \"email\"\r\n    },\r\n    company_password : {\r\n        error: \"\",\r\n        validate: \"string\",\r\n        minLength : 6,\r\n        maxLength : 10\r\n    },\r\n    company_password_confirm : {\r\n        error: \"\",\r\n        validate: \"string\",\r\n        minLength : 6,\r\n        maxLength : 10\r\n    },\r\n    ISP_name: {\r\n        error: \"\",\r\n        validate: \"text\",\r\n        minLength: 2,\r\n        maxLength: 20\r\n    },\r\n    type_of_service : {\r\n        error: \"\",\r\n        validate: \"text\"\r\n    },\r\n    photoUrl : {\r\n        error: \"\",\r\n        validate: \"text\"\r\n    },\r\n    webUrl : {\r\n        error: \"\",\r\n        validate: \"text\",\r\n        minLength: 2,\r\n        maxLength: 100\r\n    }\r\n}\r\n\r\n\r\nconst SignUp = ({ open, setOpen }) => {\r\n    const [values, setValues] = useState(initialValues);\r\n    const [stage, setStage] = useState(0);\r\n    const [url,setUrl] = useState(null);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    const [errors, setErrors] = useState({})\r\n    const [visible, setVisible] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const history = useNavigate();\r\n    const handleClose = () => setOpen(false);\r\n    \r\n\r\n    const handleChange=(e)=>{\r\n        const { name, value } = e.target\r\n        // Set values\r\n        setValues(prev => ({\r\n          ...prev,\r\n          [name]: value\r\n        }))\r\n    \r\n        // set errors\r\n        const error = formValidation(name, value, fieldsValidation) || \"\"\r\n    \r\n        setErrors(prev => ({\r\n          ...prev,\r\n          [name]: error\r\n        }))\r\n    }\r\n\r\n    const handlefileUpload = (event)=>{\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(event.target.files[0]);\r\n\r\n        reader.onloadend = function () {\r\n            setUrl([reader.result]);\r\n        }.bind(this);\r\n       \r\n        setValues(prev => ({\r\n          ...prev,\r\n          image : event.target.files[0]\r\n        }))\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        setStage(0);\r\n    }, [open])\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            enqueueSnackbar('Signing up...', { variant: 'info', key: 'verifying' });\r\n\r\n            // Example signup data\r\n            const signupData = {\r\n                name: values.ISP_name,\r\n                email: values.company_email,\r\n                password: values.company_password,\r\n                photo: values.photoUrl,\r\n                asn: values.asnNo,\r\n                contact: values.contactNo,\r\n                services: values.services,\r\n                webURL: values.webUrl\r\n            };\r\n\r\n            // Sending data to the backend\r\n            const response = await fetch('http://localhost:7000/users/signup', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(signupData)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Signup failed');\r\n            }\r\n\r\n            const responseData = await response.json();\r\n\r\n            closeSnackbar('verifying');\r\n\r\n            enqueueSnackbar('Signup successful!', { variant: 'success' });\r\n\r\n            // Store token if needed\r\n            localStorage.setItem('token', responseData.token);\r\n            navigate('/');\r\n\r\n        } catch (error) {\r\n            setTimeout(() => enqueueSnackbar(error.message, {\r\n                variant: 'error',\r\n                key: 'err_asn'\r\n            }), 3000);\r\n\r\n            setTimeout(() => closeSnackbar('err_asn'), 6000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-login\">\r\n                <DialogTitle id=\"form-dialog-login\">\r\n                    {stage===0 ? 'Sign Up Details' : 'Company Details'}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {stage===0?(\r\n                        <React.Fragment>\r\n                            <TextField\r\n                                name=\"company_email\"\r\n                                variant=\"outlined\"\r\n                                label=\"Email Address\"\r\n                                type=\"email\"\r\n                                value={values.company_email}\r\n                                margin=\"normal\"\r\n                                error={!!errors.company_email}\r\n                                helperText={errors.company_email}\r\n                                onChange={handleChange}\r\n                                fullWidth\r\n                                autoFocus\r\n                                required\r\n                            />\r\n                            <TextField\r\n                                name=\"company_password\"\r\n                                variant=\"outlined\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                value={values.company_password}\r\n                                type={visible? \"text\":\"password\"}\r\n                                error={!!errors.company_password}\r\n                                helperText={errors.company_password}\r\n                                onChange={handleChange}\r\n                                InputProps={{\r\n                                    endAdornment:\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle visibility\"\r\n                                            onClick={() => setVisible(!visible)}\r\n                                        >\r\n                                            {visible? <Visibility /> : <VisibilityOff /> }\r\n                                        </IconButton>\r\n                                }}\r\n                                fullWidth\r\n                                autoFocus\r\n                                required\r\n                            />\r\n                            <TextField\r\n                                name=\"company_password_confirm\"\r\n                                variant=\"outlined\"\r\n                                label=\"Confirm Password\"\r\n                                margin=\"normal\"\r\n                                error={!!errors.company_password_confirm}\r\n                                helperText={errors.company_password_confirm}\r\n                                type={visible? \"text\":\"password\"}\r\n                                value={values.company_password_confirm}\r\n                                onChange={handleChange}\r\n                                InputProps={{\r\n                                    endAdornment:\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle visibility\"\r\n                                            onClick={() => setVisible(!visible)}\r\n                                        >\r\n                                            {visible? <Visibility /> : <VisibilityOff /> }\r\n                                        </IconButton>\r\n                                }}\r\n                                fullWidth\r\n                                autoFocus\r\n                                required\r\n                            />\r\n                        </React.Fragment>\r\n                    ):(\r\n                        <React.Fragment>\r\n                            <TextField\r\n                                name=\"asnNo\"\r\n                                variant=\"outlined\"\r\n                                label=\"Autonomous System Number\"\r\n                                type=\"text\"\r\n                                margin=\"normal\"\r\n                                value={values.asnNo}\r\n                                onChange={handleChange}\r\n                                error={!!errors.asnNo}\r\n                                helperText={errors.asnNo}\r\n                                fullWidth\r\n                                autoFocus\r\n                                required\r\n                            />\r\n                            <TextField\r\n                                name=\"ISP_name\"\r\n                                variant=\"outlined\"\r\n                                value={values.ISP_name}\r\n                                label=\"ISP Company Name\"\r\n                                type=\"text\"\r\n                                margin=\"normal\"\r\n                                error={!!errors.ISP_name}\r\n                                helperText={errors.ISP_name}\r\n                                onChange={handleChange}\r\n                                autoFocus\r\n                                fullWidth\r\n                                required/>\r\n                            <TextField\r\n                                name=\"type_of_service\"\r\n                                variant=\"outlined\"\r\n                                label=\"Type of Service\"\r\n                                type=\"text\"\r\n                                value={values.type_of_service}\r\n                                margin=\"normal\"\r\n                                error={!!errors.type_of_service}\r\n                                helperText={errors.type_of_service}\r\n                                onChange={handleChange}\r\n                                autoFocus\r\n                                fullWidth\r\n                                required/>\r\n                             <TextField\r\n                                name=\"photoUrl\"\r\n                                variant=\"outlined\"\r\n                                label=\"Photo URL\"\r\n                                value={values.photoUrl}\r\n                                type=\"text\"\r\n                                margin=\"normal\"\r\n                                onChange={handleChange}\r\n                                autoFocus\r\n                                fullWidth\r\n                                required/>\r\n                             <TextField\r\n                                name=\"webUrl\"\r\n                                variant=\"outlined\"\r\n                                label=\"ISP Company Website URL\"\r\n                                type=\"text\"\r\n                                value={values.webUrl}\r\n                                error={!!errors.webUrl}\r\n                                helperText={errors.webUrl}\r\n                                margin=\"normal\"\r\n                                onChange={handleChange}\r\n                                autoFocus\r\n                                fullWidth\r\n                                required/>\r\n                                <Button\r\n                                    fullWidth={true}\r\n                                    margin=\"normal\"\r\n                                    onClick={() => setStage(stage-1)}\r\n                                    color='primary'\r\n                                    variant='contained'\r\n                                > Back</Button>\r\n                        </React.Fragment>\r\n                    )}\r\n                </DialogContent>\r\n                {stage===0?(\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} variant='contained' color=\"secondary\">Cancel</Button>\r\n                        <Button onClick={()=>setStage(stage=>(stage+1)%2)} variant='contained' color=\"primary\">Next</Button>\r\n                    </DialogActions>\r\n                ):(\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} variant='contained' color=\"secondary\">Cancel</Button>\r\n                        <Button onClick={handleSubmit} variant='contained' color=\"primary\">Sign Up</Button>\r\n                    </DialogActions>\r\n                )}\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\Login.js",["131","132","133","134","135"],"import React,{useState} from 'react';\r\nimport {useDispatch} from 'react-redux'\r\nimport Button from '@mui/material/Button';\r\nimport {Grid,Paper,Typography} from '@mui/material'\r\nimport { useSnackbar } from \"notistack\";\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport { useNavigate } from \"react-router\";\r\nimport {ThemeContext} from \"../../context/ThemeContext\";\r\nimport { makeStyles } from '@mui/styles';\r\nimport {loginUser} from '../../redux/actions/auth';\r\nimport formValidation from '../utils/formValidation';\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    logo : {\r\n        [theme.breakpoints.down('md')] : {\r\n            display : 'none'\r\n        }\r\n    },\r\n    paper :{\r\n        padding : 30,\r\n        [theme.breakpoints.up('md')] : {\r\n            marginLeft:30,\r\n            marginRight:30\r\n        }\r\n    }\r\n}))\r\n\r\nconst fieldsValidation = {\r\n    email : {\r\n        error: \"\",\r\n        validate: \"email\"\r\n    },\r\n    password : {\r\n        error: \"\",\r\n        validate: \"string\",\r\n        minLength : 0\r\n    },\r\n}\r\n\r\nconst Login = ({setloggedIn,setToken}) => {\r\n    const history = useNavigate();\r\n    const classes = useStyles();\r\n    const {dark, toggleTheme} = React.useContext(ThemeContext);\r\n    const dispatch = useDispatch();\r\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\r\n    const [values, setValues] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n    });\r\n    const [errors, setErrors] = useState({})\r\n    const [visible, setVisible] = useState(false);\r\n\r\n\r\n    const handleChange=(e)=>{\r\n        const { name, value } = e.target\r\n        // Set values\r\n        setValues(prev => ({\r\n          ...prev,\r\n          [name]: value\r\n        }))\r\n    \r\n        // set errors\r\n        const error = formValidation(name, value, fieldsValidation) || \"\"\r\n    \r\n        setErrors(prev => ({\r\n          ...prev,\r\n          [name]: error\r\n        }))\r\n    }\r\n\r\n\r\n    const handleSubmit = async () => {\r\n        if (errors.emailError || errors.passwordError) {\r\n            return;\r\n        } else {\r\n            enqueueSnackbar('Logging in...', { variant: 'info', key: 'logging_in' });\r\n    \r\n            try {\r\n                const response = await fetch('http://localhost:7000/users/login', { // Adjust URL if needed\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        email: values.email,\r\n                        password: values.password\r\n                    })\r\n                });\r\n    \r\n                const responseData = await response.json();\r\n    \r\n                if (!response.ok) {\r\n                    throw new Error(responseData.message || 'Invalid Credentials');\r\n                }\r\n    \r\n                closeSnackbar('logging_in');\r\n                enqueueSnackbar('Logged in Successfully!', {\r\n                    variant: 'success',\r\n                    key: 'logged_in'\r\n                });\r\n    \r\n                // Store the token\r\n                localStorage.setItem('token', responseData.token);\r\n    \r\n                setloggedIn();\r\n                setToken(responseData.token);\r\n    \r\n                navigate('/'); // Redirect to homepage\r\n            } catch (e) {\r\n                closeSnackbar('logging_in');\r\n                enqueueSnackbar(e.message, { variant: 'error', key: 'error' });\r\n            }\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Grid container spacing={2} direction=\"row\" alignItems=\"center\">\r\n                <Grid item md={6} xs={12} >\r\n                    <Paper elevation={2} className={classes.paper}>\r\n                    <Typography variant='caption'>\r\n                        The company can login into this portal if they have officially registered.\r\n                    </Typography>\r\n                    <TextField\r\n                        name=\"email\"\r\n                        variant=\"outlined\"\r\n                        label=\"Company Email Address\"\r\n                        type=\"email\"\r\n                        value={values.email}\r\n                        margin=\"normal\"\r\n                        onChange={handleChange}\r\n                        helperText={errors.email}\r\n                        error={!!errors.email}\r\n                        fullWidth\r\n                        autoFocus\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        name=\"password\"\r\n                        variant=\"outlined\"\r\n                        label=\"Password\"\r\n                        value={values.password}\r\n                        margin=\"normal\"\r\n                        type={visible? \"text\":\"password\"}\r\n                        helperText={errors.password}\r\n                        error={!!errors.email}\r\n                        onChange={handleChange}\r\n                        InputProps={{\r\n                            endAdornment:\r\n                            <IconButton\r\n                                aria-label=\"Toggle visibility\"\r\n                                onClick={() => setVisible(!visible)}\r\n                            >\r\n                                {visible? <Visibility /> : <VisibilityOff /> }\r\n                            </IconButton>\r\n                        }}\r\n                        fullWidth\r\n                        autoFocus\r\n                        required\r\n                    />\r\n                    <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\" style={{width:'100%',marginTop:10}}>\r\n                        Login\r\n                    </Button>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item md={6} xs={0} align=\"center\" className={classes.logo}>\r\n                {dark ? <img src='rnlogod.png'/> \r\n                : <img src='rnlogo.png'/>}\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n//}\r\n                    \r\n\r\nexport default Login;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\CompanyProfile.js",["136","137","138","139","140","141","142","143","144","145","146","147","148"],"import React,{useEffect,useState} from \"react\";\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport {Typography,Grid,TextField,makeStyles,Paper,Divider} from \"@mui/material\";\r\nimport {Map,GoogleApiWrapper} from 'google-maps-react';\r\nimport Geocode from \"react-geocode\";\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    map : {\r\n        padding : 10\r\n    }\r\n\r\n}))\r\n\r\nconst CompanyProfile=(props)=>{\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CompanyProfile;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\authentication\\Logout.js",["149"],"import React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport useTheme from \"@mui/styles/useTheme\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst Logout = ({ open, setOpen, setLoggedIn,setDrawerOpen ,setTitle}) => {\r\n    const theme = useTheme();\r\n    const {enqueueSnackbar, closeSnackbar} = useSnackbar();\r\n    let history = useNavigate();\r\n\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSubmit = () => {\r\n        enqueueSnackbar('Logging out....', {variant: 'info', key: 'logging_out'});\r\n        localStorage.clear();\r\n        //setTitle(\"RaterNet\")\r\n        setTimeout(() => closeSnackbar('logging_out'), 3000);\r\n        setTimeout(() => enqueueSnackbar('Logged out Successfully!', {variant: 'success', key: 'logged_out'}), 3000);\r\n        setTimeout(() => closeSnackbar('logged_out'), 6000);\r\n        setTimeout(() => setLoggedIn(false), 3000);\r\n        //setTimeout(() => navigate('/login'),3000);\r\n        setDrawerOpen(false);\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n             <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-logout\">\r\n                <DialogTitle id=\"form-dialog-logout\">Logout</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText style={{ color: theme.palette.text.primary }}>\r\n                        Are you sure you want to logout?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} variant=\"outlined\" color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} variant=\"outlined\" color=\"primary\">\r\n                        Logout\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logout;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Plans\\Plans.js",["150","151","152","153"],"import React,{useEffect} from \"react\";\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport formValidation from '../utils/formValidation';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    TextField,\r\n    makeStyles,\r\n    Paper,\r\n    Avatar,\r\n    Button\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport ViewPlans from './ViewPlans'\r\nimport {dummy_plans} from '../../dummy-data/plan'\r\nimport {addPlan,fetchPlans,updatePlan,deletePlan} from '../../redux/actions/plans'\r\nimport Error from '../Error/Error';\r\nimport Loading from '../Loading/Loading'\r\n\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    map : {\r\n        padding : 10\r\n    },\r\n    large: {\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    }\r\n}))\r\n\r\nconst values = {\r\n    plan_name : \"\",\r\n    type_of_service : \"\",\r\n    type_of_plan : \"\",\r\n    price : \"\",\r\n    amount_data : \"\",\r\n    duration : \"\",\r\n    details : \"\"\r\n}\r\n\r\nconst fieldsValidation = {\r\n    plan_name : {\r\n        error: \"\",\r\n        validate: \"text\"\r\n    },\r\n    type_of_service : {\r\n        error: \"\",\r\n        validate: \"string\"\r\n    },\r\n    type_of_plan : {\r\n        error: \"\",\r\n        validate: \"string\"\r\n    },\r\n    price : {\r\n        error: \"\",\r\n        validate: \"number\",\r\n        minLength: 2,\r\n        maxLength: 1000\r\n    },\r\n    amount_data : {\r\n        error: \"\",\r\n        validate: \"text\"\r\n    },\r\n    duration : {\r\n        error: \"\",\r\n        validate: \"number\",\r\n        minLength: 1,\r\n        maxLength: 6\r\n    },\r\n    details : {\r\n        error: \"\",\r\n        validate: \"text\",\r\n        minLength: 2,\r\n        maxLength: 20\r\n    }\r\n}\r\n\r\nconst Plans = (props) => {\r\n    const [formValues, setFormValues] = useState(values)\r\n    const [formErrors, setFormErrors] = useState({})\r\n    const [url,setUrl] = useState(null);\r\n    const classes = useStyles();\r\n    const token = localStorage.getItem('token');\r\n    const plans = useSelector(state=>state.plans.plans);\r\n    const dispatch = useDispatch();\r\n    const [loading,setLoading] = React.useState(false);\r\n    const [error,setError] = React.useState(null);\r\n    const [isUpdate,setisUpdate] = React.useState(false);\r\n    const [image,setImage] = React.useState(null);\r\n\r\n\r\n    function UploadButtons({ classes }) {     \r\n        return (\r\n          <React.Fragment>\r\n            <input\r\n              accept=\"image/*\"\r\n              className={classes.input}\r\n              onChange={handlefileUpload}\r\n              type=\"file\"\r\n            />\r\n            <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" onChange={handlefileUpload}/>\r\n            <label htmlFor=\"icon-button-file\">\r\n              <IconButton color=\"primary\" aria-label=\"upload picture\" element=\"span\">\r\n                <PhotoCamera fontSize=\"large\"/>\r\n              </IconButton>\r\n            </label>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n\r\n    const getPlans = async (id)=>{\r\n          try{\r\n            await dispatch(fetchPlans(id));\r\n            setLoading(false)\r\n          } catch(e){\r\n            setError(e.message);\r\n            setLoading(false);\r\n          }\r\n         \r\n      }\r\n\r\n    React.useEffect(()=>{\r\n        let user = jwt_decode(token);\r\n        getPlans(user.id) \r\n    },[dispatch])\r\n\r\n    const addorUpdatePlans = async ()=>{\r\n        let action;\r\n        if(isUpdate===true){\r\n            action = updatePlan(formValues,image);\r\n        }else {\r\n            action = addPlan(formValues,image)\r\n        }\r\n\r\n        try{\r\n          await dispatch(action);\r\n        } catch(e){\r\n          setError(e.message);\r\n        }  \r\n    }\r\n\r\n    const deletePlanHandler = async (id)=>{\r\n        try{\r\n          await dispatch(deletePlan(id));\r\n        } catch(e){\r\n          setError(e.message);\r\n        }  \r\n    }\r\n\r\n    const handleChange=(e)=>{\r\n        const { name, value } = e.target\r\n        // Set values\r\n        setFormValues(prev => ({\r\n          ...prev,\r\n          [name]: value\r\n        }))\r\n    \r\n        // set errors\r\n        const error = formValidation(name, value, fieldsValidation) || \"\"\r\n    \r\n        setFormErrors(prev => ({\r\n          ...prev,\r\n          [name]: error\r\n        }))\r\n    }\r\n\r\n    const handlefileUpload = (event)=>{\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(event.target.files[0]);\r\n\r\n        reader.onloadend = function () {\r\n            setUrl([reader.result]);\r\n        }.bind(this);\r\n       \r\n        setImage(\r\n          event.target.files[0]\r\n        )\r\n    }\r\n\r\n    const setValues = (id)=>{\r\n        let plan = (plans.data?.plan || []).find(plan => plan._id === id);\r\n        setFormValues({...plan})\r\n        setisUpdate(true);\r\n    }\r\n\r\n    if(error){\r\n        return <Error message = {error}/>\r\n    }\r\n\r\n    if(loading){\r\n        return <Loading message = \"Loading Your Plans\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" spacing={2}>\r\n            <Grid item xs={6}>\r\n                <Paper elevation={3} style={{padding:20}}>\r\n                <div style={{display:'flex',margin:10}}>\r\n                    <Avatar alt='image' src={url} className={classes.large}/>\r\n                    <div style={{\r\n                        display:'flex',\r\n                        justifyContent : 'space-between',\r\n                        marginLeft : 40,\r\n                        alignItems : 'center',\r\n                        width : '100%'\r\n                    }}>\r\n                        <Typography variant='h4'>\r\n                            Add Plan\r\n                        </Typography>\r\n                        <UploadButtons classes={classes} />\r\n                    </div>  \r\n                </div>\r\n                <TextField\r\n                    name=\"plan_name\"\r\n                    variant=\"outlined\"\r\n                    value={formValues.plan_name}\r\n                    label=\"Name of Plan\"\r\n                    type=\"text\"\r\n                    margin=\"normal\"\r\n                    onChange={handleChange}\r\n                    error={!!formErrors.plan_name}\r\n                    helperText={formErrors.plan_name}\r\n                    autoFocus\r\n                    fullWidth\r\n                    required/>\r\n                <div style={{\r\n                    display : 'flex',\r\n                    justifyContent : 'space-between',\r\n                    marginLeft : 10,\r\n                    marginRight : 10,\r\n                    alignItems : 'center'\r\n                }}>\r\n                    <FormControl style={{width:'40%'}}>\r\n                        <InputLabel id=\"demo-simple-select-label\">Plan Type</InputLabel>\r\n                        <Select\r\n                            labelId=\"type_of_plan\"\r\n                            name=\"type_of_plan\"\r\n                            value={formValues.type_of_plan}\r\n                            onChange={handleChange}\r\n                        >\r\n                            <MenuItem value={'Prepaid'}>Prepaid</MenuItem>\r\n                            <MenuItem value={'Postpaid'}>Postpaid</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                        <FormControl style={{width:'40%'}}>\r\n                        <InputLabel id=\"demo-simple-select-label\">Service Type</InputLabel>\r\n                        <Select\r\n                            labelId=\"type_of_service\"\r\n                            name=\"type_of_service\"\r\n                            value={formValues.type_of_service}\r\n                            onChange={handleChange}\r\n                        >\r\n                            <MenuItem value={'Data'}>Data</MenuItem>\r\n                            <MenuItem value={'WiFi'}>WiFi</MenuItem>\r\n                            <MenuItem value={'Fiber/Broadband'}>Fiber/Broadband</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                \r\n                <TextField\r\n                    name=\"price\"\r\n                    variant=\"outlined\"\r\n                    value={formValues.price}\r\n                    label=\"Price\"\r\n                    type=\"text\"\r\n                    margin=\"normal\"\r\n                    onChange={handleChange}\r\n                    error={!!formErrors.price}\r\n                    helperText={formErrors.price}\r\n                    autoFocus\r\n                    fullWidth\r\n                    required/>\r\n                <TextField\r\n                    name=\"amount_data\"\r\n                    variant=\"outlined\"\r\n                    value={formValues.amount_data}\r\n                    label=\"Data Amount(GB)\"\r\n                    type=\"text\"\r\n                    margin=\"normal\"\r\n                    onChange={handleChange}\r\n                    error={!!formErrors.amount_data}\r\n                    helperText={formErrors.amount_data}\r\n                    autoFocus\r\n                    fullWidth\r\n                    required/>\r\n                <TextField\r\n                    name=\"duration\"\r\n                    variant=\"outlined\"\r\n                    value={formValues.duration}\r\n                    label=\"Duration\"\r\n                    type=\"text\"\r\n                    margin=\"normal\"\r\n                    onChange={handleChange}\r\n                    error={!!formErrors.duration}\r\n                    helperText={formErrors.duration}\r\n                    autoFocus\r\n                    fullWidth\r\n                    required/>\r\n                <TextField\r\n                    name=\"details\"\r\n                    variant=\"outlined\"\r\n                    value={formValues.details}\r\n                    label=\"Other Details\"\r\n                    type=\"text\"\r\n                    margin=\"normal\"\r\n                    error={!!formErrors.details}\r\n                    helperText={formErrors.details}\r\n                    onChange={handleChange}\r\n                    autoFocus\r\n                    fullWidth\r\n                    required/>\r\n                    <div style={{ display:'flex',marginTop:10,justifyContent:'space-between'}}>\r\n                       {isUpdate ? (\r\n                            <Button variant=\"contained\" color=\"primary\" \r\n                            style={{width:'40%'}} onClick={addorUpdatePlans}>\r\n                                Update Plan\r\n                            </Button>\r\n                       ): (\r\n                        <Button variant=\"contained\" color=\"primary\" \r\n                            style={{width:'40%'}} onClick={addorUpdatePlans}>\r\n                                Add Plan\r\n                        </Button>\r\n                       )}\r\n                        <Button variant=\"contained\" color=\"secondary\" \r\n                            style={{width:'40%'}}\r\n                            onClick={()=>{\r\n                            setFormValues(values)\r\n                            setFormErrors({})\r\n                            setUrl(null)\r\n                            setisUpdate(false)\r\n                            }}>Reset</Button>\r\n                    </div> \r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <ViewPlans plans={plans} setValues={setValues} deletePlan={deletePlanHandler}/>\r\n            </Grid>   \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Plans;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\auth.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\plans.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Plans\\ViewPlans.js",["154","155"],"import React from \"react\";\r\nimport {Typography} from \"@mui/material\";\r\nimport Chip from '@mui/material/Chip';\r\nimport { \r\n    Grid,\r\n    makeStyles,\r\n    Paper,\r\n    Divider,\r\n    Box,\r\n    Button\r\n} from \"@mui/material\";\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n\r\n\r\nconst ViewPlans = (props) => {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    \r\n    const renderPlans = (plans)=>(\r\n    <React.Fragment>\r\n        {plans.map(plan=>(\r\n            <Paper key={plan._id} elevation={2} style={{\r\n                margin : 10,\r\n                padding : 20\r\n            }}>\r\n                <div style={{display:'flex',justifyContent : 'space-between'}}>\r\n                    <Typography variant='h5'>\r\n                        {plan.plan_name}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">\r\n                        {plan.type_of_service}\r\n                    </Typography>\r\n                </div>\r\n                <div style={{display:'flex',justifyContent : 'space-between',padding:10}}>\r\n                    <Chip size='large' label={plan.price.toString()+' INR'} color='primary'/>\r\n                    <Chip size='large' label={plan.amount_data} color='primary'/>\r\n                    <Chip size='large' label={plan.duration} color='primary'/>\r\n                </div>\r\n                <Divider fullWidth/>\r\n                <br></br>\r\n                <Typography variant=\"body2\" color='textSecondary'>\r\n                    {plan.details}\r\n                </Typography>\r\n                <br></br>\r\n                <div style={{display:'flex',justifyContent : 'space-between'}}>\r\n                    <Button \r\n                    variant='contained' \r\n                    color='primary' \r\n                    style={{width:'40%'}}\r\n                    onClick={props.setValues.bind(this,plan._id)}>Update</Button>\r\n                    <Button variant='contained'\r\n                     color='secondary' \r\n                     style={{width:'40%'}}\r\n                     onClick={props.deletePlan.bind(this,plan._id)}>Delete</Button>\r\n                </div>\r\n            </Paper>\r\n        ))}\r\n        </React.Fragment>\r\n    )\r\n    \r\n    const plansArray = props.plans?.data?.plan || [];    \r\n\r\n    return (\r\n       <div>\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered>\r\n            <Tab label=\"Prepaid\" {...a11yProps(0)} />\r\n            <Tab label=\"Postpaid\" {...a11yProps(1)} />\r\n            </Tabs>\r\n            <div style={{\r\n                height : '100vh',\r\n                overflow : 'auto'\r\n            }}>\r\n                <TabPanel value={value} index={0}>    \r\n                    {renderPlans(plansArray.filter(plan => plan.type_of_plan === \"Prepaid\"))}\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1}>\r\n                    {renderPlans(plansArray.filter(plan=>plan.type_of_plan===\"Postpaid\"))}\r\n                </TabPanel>\r\n            </div>    \r\n       </div>\r\n    )\r\n}\r\n\r\nexport default ViewPlans;","C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\dummy-data\\plan.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Loading\\Loading.jsx",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Error\\Error.jsx",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\utils\\formValidation.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\redux\\actions\\reviews.js",[],"C:\\Users\\MANASA\\Documents\\RaterNet\\frontend\\src\\components\\Profile.js",["156","157","158"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport axios from \"axios\";\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Paper,\r\n    Avatar,\r\n    Button,\r\n    Divider,\r\n    TextField,\r\n    Box,\r\n    MenuItem,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@mui/material\";\r\n\r\nconst indianStates = [\r\n    \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \"Goa\", \"Gujarat\", \"Haryana\", \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \"Meghalaya\", \"Mizoram\", \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\"\r\n];\r\n\r\nconst Profile = () => {\r\n    const history = useNavigate();\r\n    const token = localStorage.getItem(\"token\");\r\n    const [user, setUser] = useState(null);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [formData, setFormData] = useState({});\r\n    const [locations, setLocations] = useState([]);\r\n    const [isAddLocationOpen, setIsAddLocationOpen] = useState(false);\r\n    const [newLocation, setNewLocation] = useState({ address_line1: \"\", city: \"\", state: \"\", pincode: \"\" });\r\n    const baseUrl = \"http://localhost:7000\";\r\n\r\n    useEffect(() => {\r\n        const fetchUserDetails = async (asn) => {\r\n            try {\r\n                const response = await axios.get(`${baseUrl}/users/profile/${asn}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                const userData = response.data.data.user;\r\n                setUser(userData);\r\n                setFormData(userData);\r\n                fetchLocations(userData._id);\r\n            } catch (error) {\r\n                console.error(\"Error fetching user details:\", error);\r\n                navigate(\"/login\");\r\n            }\r\n        };\r\n\r\n        const fetchLocations = async (company_id) => {\r\n            try {\r\n                const response = await axios.get(`${baseUrl}/locations/options/${company_id}`);\r\n                console.log(\"Fetched locations:\", response.data.data.locations);\r\n                setLocations(response.data.data.locations);\r\n            } catch (error) {\r\n                console.error(\"Error fetching locations:\", error);\r\n            }\r\n        };\r\n\r\n        if (token) {\r\n            const decodedUser = jwt_decode(token);\r\n            const asn = decodedUser.asn;\r\n\r\n            if (asn) {\r\n                fetchUserDetails(asn);\r\n            } else {\r\n                navigate(\"/login\");\r\n            }\r\n        } else {\r\n            navigate(\"/login\");\r\n        }\r\n    }, [token, history]);\r\n\r\n    const handleEditToggle = () => setIsEditing(!isEditing);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleLocationChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setNewLocation((prev) => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        const updatedFormData = { ...formData }; \r\n        delete updatedFormData.password;\r\n        try {\r\n            await axios.patch(`${baseUrl}/users/updateMe`, updatedFormData, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setUser(formData);\r\n            setIsEditing(false);\r\n        } catch (error) {\r\n            console.error(\"Error updating user details:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddLocation = async () => {\r\n        if (!newLocation.address_line1 || !newLocation.city || !newLocation.state || !/^\\d{6}$/.test(newLocation.pincode)) {\r\n            alert(\"Please fill all fields correctly.\");\r\n            return;\r\n        }\r\n    \r\n        try {\r\n                await axios.post(`${baseUrl}/locations`, { \r\n                ...newLocation, \r\n                company_id: user._id \r\n            }, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n    \r\n            // Ensure locations state is always an array before updating\r\n            // setLocations((prev) => (Array.isArray(prev) ? [...prev, response.data] : [response.data]));\r\n\r\n            const res = await axios.get(`${baseUrl}/locations/options/${user._id}`);\r\n            setLocations(res.data.data.locations); // ✅ Update locations list\r\n    \r\n            setIsAddLocationOpen(false);\r\n            setNewLocation({ addressLine1: \"\", city: \"\", state: \"\", pincode: \"\" });\r\n        } catch (error) {\r\n            console.error(\"Error adding location:\", error);\r\n        }\r\n    };\r\n    \r\n\r\n    if (!user) return <Typography>Loading user data...</Typography>;\r\n\r\n    return (\r\n        <Box display=\"flex\" bgcolor=\"#333\" p={4}>\r\n            <Paper style={{ padding: 20, width: \"40%\", backgroundColor: \"#424242\" }}>\r\n                <Avatar style={{ margin: \"auto\", width: 100, height: 100 }}>{formData.name?.charAt(0)}</Avatar>\r\n                <Typography variant=\"h4\" style={{ margin: \"20px 0\", color: \"white\" }}>{formData.name}</Typography>\r\n\r\n                {['asn', 'email', 'webURL'].map((field) => (\r\n                    <Paper key={field} style={{ padding: 10, backgroundColor: \"#616161\", marginBottom: 10 }}>\r\n                        {isEditing ? (\r\n                            <TextField\r\n                                fullWidth\r\n                                label={field.toUpperCase()}\r\n                                name={field}\r\n                                value={formData[field] || ''}\r\n                                onChange={handleInputChange}\r\n                                size=\"small\"\r\n                                disabled={field !== 'webURL'}\r\n                            />\r\n                        ) : (\r\n                            <Typography style={{ color: \"white\" }}>\r\n                                <strong>{field.toUpperCase()}:</strong> {formData[field]}\r\n                            </Typography>\r\n                        )}\r\n                    </Paper>\r\n                ))}\r\n\r\n                <Button variant=\"contained\" style={{ backgroundColor: isEditing ? \"#4caf50\" : \"#ffc107\" }} onClick={isEditing ? handleSave : handleEditToggle}>\r\n                    {isEditing ? \"Save Changes\" : \"Edit Profile\"}\r\n                </Button>\r\n            </Paper>\r\n\r\n            <Box ml={4} flex={1}>\r\n                <Typography variant=\"h5\" style={{ color: \"white\" }}>ISP Locations</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => setIsAddLocationOpen(true)} style={{ marginBottom: 10 }}>\r\n                    Add Location\r\n                </Button>\r\n\r\n                {/* Render Locations */}\r\n                    {locations && locations.length > 0 ? (\r\n                        <Paper style={{ padding: 10, backgroundColor: \"#616161\", marginTop: 10 }}>\r\n                            {locations.map((location, index) => (\r\n                                <Box key={index} p={2} mb={2} bgcolor=\"#424242\">\r\n                                    <Typography style={{ color: \"white\" }}>\r\n                                        <strong>Address:</strong> {location.address_line1}, {location.city}, {location.state}, {location.pincode}\r\n                                    </Typography>\r\n                                </Box>\r\n                            ))}\r\n                        </Paper>\r\n                    ) : (\r\n                        <Typography style={{ color: \"white\", marginTop: 10 }}>No locations added yet.</Typography>\r\n                    )}\r\n\r\n                {/* Add Location Popup */}\r\n                <Dialog open={isAddLocationOpen} onClose={() => setIsAddLocationOpen(false)}>\r\n                    <DialogTitle>Add New Location</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField fullWidth label=\"Address Line 1\" name=\"address_line1\" value={newLocation.address_line1} onChange={handleLocationChange} margin=\"dense\" />\r\n                        <TextField fullWidth label=\"City\" name=\"city\" value={newLocation.city} onChange={handleLocationChange} margin=\"dense\" />\r\n                        <TextField select fullWidth label=\"State\" name=\"state\" value={newLocation.state} onChange={handleLocationChange} margin=\"dense\">\r\n                            {indianStates.map((state) => (\r\n                                <MenuItem key={state} value={state}>{state}</MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                        <TextField fullWidth label=\"Pincode\" name=\"pincode\" value={newLocation.pincode} onChange={handleLocationChange} margin=\"dense\" />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setIsAddLocationOpen(false)} color=\"secondary\">Cancel</Button>\r\n                        <Button onClick={handleAddLocation} color=\"primary\" variant=\"contained\">Submit</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n",{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":40,"nodeType":"165","messageId":"166","endLine":2,"endColumn":46},{"ruleId":"163","severity":1,"message":"167","line":4,"column":15,"nodeType":"165","messageId":"166","endLine":4,"endColumn":18},{"ruleId":"163","severity":1,"message":"168","line":20,"column":8,"nodeType":"165","messageId":"166","endLine":20,"endColumn":22},{"ruleId":"163","severity":1,"message":"169","line":100,"column":12,"nodeType":"165","messageId":"166","endLine":100,"endColumn":23},{"ruleId":"163","severity":1,"message":"170","line":101,"column":11,"nodeType":"165","messageId":"166","endLine":101,"endColumn":33},{"ruleId":"171","severity":1,"message":"172","line":118,"column":8,"nodeType":"173","endLine":118,"endColumn":15,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":13,"column":3,"nodeType":"177","endLine":35,"endColumn":5},{"ruleId":"175","severity":1,"message":"176","line":12,"column":1,"nodeType":"177","endLine":62,"endColumn":2},{"ruleId":"163","severity":1,"message":"178","line":1,"column":36,"nodeType":"165","messageId":"166","endLine":1,"endColumn":42},{"ruleId":"163","severity":1,"message":"179","line":2,"column":9,"nodeType":"165","messageId":"166","endLine":2,"endColumn":20},{"ruleId":"163","severity":1,"message":"180","line":2,"column":21,"nodeType":"165","messageId":"166","endLine":2,"endColumn":32},{"ruleId":"163","severity":1,"message":"181","line":13,"column":9,"nodeType":"165","messageId":"166","endLine":13,"endColumn":12},{"ruleId":"163","severity":1,"message":"182","line":13,"column":13,"nodeType":"165","messageId":"166","endLine":13,"endColumn":29},{"ruleId":"171","severity":1,"message":"183","line":191,"column":8,"nodeType":"173","endLine":191,"endColumn":24,"suggestions":"184"},{"ruleId":"163","severity":1,"message":"185","line":13,"column":9,"nodeType":"165","messageId":"166","endLine":13,"endColumn":19},{"ruleId":"163","severity":1,"message":"186","line":76,"column":12,"nodeType":"165","messageId":"166","endLine":76,"endColumn":15},{"ruleId":"163","severity":1,"message":"187","line":80,"column":11,"nodeType":"165","messageId":"166","endLine":80,"endColumn":19},{"ruleId":"163","severity":1,"message":"188","line":102,"column":11,"nodeType":"165","messageId":"166","endLine":102,"endColumn":27},{"ruleId":"189","severity":1,"message":"190","line":108,"column":11,"nodeType":"191","messageId":"192","endLine":108,"endColumn":15,"fix":"193"},{"ruleId":"163","severity":1,"message":"194","line":12,"column":9,"nodeType":"165","messageId":"166","endLine":12,"endColumn":18},{"ruleId":"163","severity":1,"message":"195","line":45,"column":18,"nodeType":"165","messageId":"166","endLine":45,"endColumn":29},{"ruleId":"163","severity":1,"message":"187","line":46,"column":11,"nodeType":"165","messageId":"166","endLine":46,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":169,"column":25,"nodeType":"198","endLine":169,"endColumn":49},{"ruleId":"196","severity":1,"message":"197","line":170,"column":19,"nodeType":"198","endLine":170,"endColumn":42},{"ruleId":"163","severity":1,"message":"199","line":1,"column":15,"nodeType":"165","messageId":"166","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"200","line":1,"column":25,"nodeType":"165","messageId":"166","endLine":1,"endColumn":33},{"ruleId":"163","severity":1,"message":"180","line":2,"column":21,"nodeType":"165","messageId":"166","endLine":2,"endColumn":32},{"ruleId":"163","severity":1,"message":"201","line":3,"column":9,"nodeType":"165","messageId":"166","endLine":3,"endColumn":19},{"ruleId":"163","severity":1,"message":"202","line":3,"column":20,"nodeType":"165","messageId":"166","endLine":3,"endColumn":24},{"ruleId":"163","severity":1,"message":"203","line":3,"column":25,"nodeType":"165","messageId":"166","endLine":3,"endColumn":34},{"ruleId":"163","severity":1,"message":"204","line":3,"column":46,"nodeType":"165","messageId":"166","endLine":3,"endColumn":51},{"ruleId":"163","severity":1,"message":"205","line":3,"column":52,"nodeType":"165","messageId":"166","endLine":3,"endColumn":59},{"ruleId":"163","severity":1,"message":"181","line":4,"column":9,"nodeType":"165","messageId":"166","endLine":4,"endColumn":12},{"ruleId":"163","severity":1,"message":"182","line":4,"column":13,"nodeType":"165","messageId":"166","endLine":4,"endColumn":29},{"ruleId":"163","severity":1,"message":"206","line":5,"column":8,"nodeType":"165","messageId":"166","endLine":5,"endColumn":15},{"ruleId":"163","severity":1,"message":"207","line":7,"column":7,"nodeType":"165","messageId":"166","endLine":7,"endColumn":16},{"ruleId":"163","severity":1,"message":"187","line":15,"column":11,"nodeType":"165","messageId":"166","endLine":15,"endColumn":19},{"ruleId":"163","severity":1,"message":"208","line":15,"column":9,"nodeType":"165","messageId":"166","endLine":15,"endColumn":16},{"ruleId":"163","severity":1,"message":"199","line":1,"column":15,"nodeType":"165","messageId":"166","endLine":1,"endColumn":24},{"ruleId":"163","severity":1,"message":"209","line":22,"column":9,"nodeType":"165","messageId":"166","endLine":22,"endColumn":20},{"ruleId":"171","severity":1,"message":"210","line":135,"column":7,"nodeType":"173","endLine":135,"endColumn":17,"suggestions":"211"},{"ruleId":"189","severity":1,"message":"190","line":183,"column":11,"nodeType":"191","messageId":"192","endLine":183,"endColumn":15,"fix":"212"},{"ruleId":"163","severity":1,"message":"202","line":5,"column":5,"nodeType":"165","messageId":"166","endLine":5,"endColumn":9},{"ruleId":"163","severity":1,"message":"213","line":6,"column":5,"nodeType":"165","messageId":"166","endLine":6,"endColumn":15},{"ruleId":"163","severity":1,"message":"214","line":2,"column":10,"nodeType":"165","messageId":"166","endLine":2,"endColumn":19},{"ruleId":"163","severity":1,"message":"202","line":7,"column":5,"nodeType":"165","messageId":"166","endLine":7,"endColumn":9},{"ruleId":"163","severity":1,"message":"205","line":11,"column":5,"nodeType":"165","messageId":"166","endLine":11,"endColumn":12},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"no-unused-vars","'colors' is defined but never used.","Identifier","unusedVar","'red' is defined but never used.","'CompanyProfile' is defined but never used.","'openProfile' is assigned a value but never used.","'handleProfileClickOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["217"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useRef' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Map' is defined but never used.","'GoogleApiWrapper' is defined but never used.","React Hook useEffect has a missing dependency: 'getReviews'. Either include it or remove the dependency array.",["218"],"'SignUpUser' is defined but never used.","'url' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'handlefileUpload' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"219","text":"220"},"'loginUser' is defined but never used.","'toggleTheme' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'Typography' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'Paper' is defined but never used.","'Divider' is defined but never used.","'Geocode' is defined but never used.","'useStyles' is assigned a value but never used.","'history' is assigned a value but never used.","'dummy_plans' is defined but never used.","React Hook React.useEffect has missing dependencies: 'getPlans' and 'token'. Either include them or remove the dependency array.",["221"],{"range":"222","text":"220"},"'makeStyles' is defined but never used.","'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},[2939,2950],"",{"desc":"227","fix":"228"},[4833,4844],"Update the dependencies array to be: [history, token]",{"range":"229","text":"230"},"Update the dependencies array to be: [token, history, getReviews]",{"range":"231","text":"232"},"Update the dependencies array to be: [dispatch, getPlans, token]",{"range":"233","text":"234"},[4072,4079],"[history, token]",[7195,7211],"[token, history, getReviews]",[3669,3679],"[dispatch, getPlans, token]"]